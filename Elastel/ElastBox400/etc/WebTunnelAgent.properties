##
## This is the configuration file for WebTunnelAgent.
##
## Generated 2022-12-26 08:45:19 for fjydpf@gmail.com.
##
## See https://github.com/my-devices/sdk/blob/master/WebTunnel/WebTunnelAgent/README.md
## for a description of the file format and all available settings.
##

#
# WebTunnel Configuration
#

# The domain UUID is used to associate the device with a user account.
webtunnel.domain = 385f4d80-62de-4c50-b429-f8ad0fce2f68

# The device ID will be used to address the device and must
# be unique. We use the system's Ethernet address as part
# of the ID (${system.nodeId}).
webtunnel.deviceId = 7492cc27-433d-4604-8731-a4d983a8acb1

# This optional property can be used to set the device name property shown in the
# macchina.io REMOTE dashboard and device page.
# Note that if enabled, this will set the name property of the device only once, when
# the device is created on the server when the initial connection is made.
# Further changes to the device name have to be made directly on the macchina.io REMOTE
# web interface, or through its API.
# You can specify a name, or use a configuration variable like ${system.nodeName} or
# refer to an environment variable like ${system.env.HOSTNAME}.
webtunnel.deviceName = ${system.nodeName}

# The IP address or domain name of the target device.
webtunnel.host = 127.0.0.1

# A comma-separated list of port numbers to forward.
# Should include the port number of the device's web server
# (usually 80, but can be another one). Can also include
# SSH (22) or other TCP ports.
webtunnel.ports = 22, 80

# The port number of the device's web server. Must only be
# set if different from default HTTP port 80. Must also
# be included in above webtunnel.ports list.
webtunnel.httpPort = 80

# The port number of the device's SSH (Secure Shell) server.
# Used to enable SSH support in the web interface.
# Must also be included in above webtunnel.ports list.
webtunnel.sshPort = 22

# The port number of the device's VNC (Virtual Network Computing) server.
# Used to enable VNC support in the web interface.
# Must also be included in above webtunnel.ports list.
#webtunnel.vncPort = 5900

# The port number of the device's RDP (Remote Desktop Protocol) server.
# Used to enable RDP support in the web interface
# (via the macchina.io REMOTE Helper application).
# Must also be included in above webtunnel.ports list.
#webtunnel.rdpPort = 3389

# The URL of the reflector server.
# If your WebTunnelAgent build does not support SSL/TLS,
# replace https with http. The connection between device
# and reflector server will not be secure in that case.
webtunnel.reflectorURI = https://dm.elastel.com

# The username of the device. Consists of device ID and
# domain UUID, separated by '@'.
webtunnel.username = ${webtunnel.deviceId}@${webtunnel.domain}

# The device password, used for authenticating the device.
# Device authentication is disabled on the demo server,
# so any password given here will be ignored.
webtunnel.password =

# The timeout (seconds) for connecting to the local (forwarded) server socket.
webtunnel.connectTimeout = 10

# The timeout (seconds) for local (forwarded) socket connections.
webtunnel.localTimeout = 7200

# The timeout (seconds) for the WebTunnel connection to the reflector server.
webtunnel.remoteTimeout = 900

# The number of I/O threads the WebTunnelDispatcher should use.
webtunnel.threads = 4


#
# HTTP Configuration
#

# The timeout (seconds) for the initial HTTP(S) connection to the reflector server.
http.timeout = 30

# Set to true to configure a HTTP proxy.
http.proxy.enable = false

# The domain name of the proxy server.
http.proxy.host = proxy.nowhere.com

# The port of the proxy server.
http.proxy.port = 80

# The username for the proxy server, if required.
http.proxy.username =

# The password for the proxy server, if required.
http.proxy.password =


#
# TLS (OpenSSL) Configuration
#

# Enable (true) or disable (false) accepting unknown certificates.
# Note: OpenSSL for Windows does not include a list of trusted
# root certificates, so we set this to false to make it work
# out of the box on Windows. You can set this to true if
# your system has an up-to-date list of trusted root certificates
# that includes the root certificate used by the reflector server, or
# if you have your own file or directory of valid root certificates
# specified in tls.caLocation.
tls.acceptUnknownCertificate = true

# List of supported OpenSSL ciphers.
tls.ciphers = HIGH:!DSS:!aNULL@STRENGTH

# Enable (true) or disable (false) extended (domain name) certificate validation.
tls.extendedCertificateVerification = true

# Directory or file containing trusted root certificates.
# Leave emtpy to use the system's default list.
tls.caLocation =


#
# Logging Configuration
#
# See <http://pocoproject.org/slides/110-Logging.pdf>
# and <http://pocoproject.org/slides/185-LoggingConfiguration.pdf>
# for how this works.
#

# Log level should be one of none, debug, information, notice, warning, error, critical or fatal.
logging.loggers.root.level = information

# Use one of the loggers defined further down: console, syslog or file.
logging.loggers.root.channel = console

# Console logging
logging.channels.console.class = ColorConsoleChannel
logging.channels.console.pattern = %Y-%m-%d %H:%M:%S.%i [%p] %s<%I>: %t

# On Linux we can use syslogd for logging.
#logging.channels.syslog.class = SyslogChannel
#logging.channels.syslog.pattern = %s: %t
#logging.channels.syslog.name = webtunnels
#logging.channels.syslog.facility = SYSLOG_LOCAL0

# A log file.
logging.channels.file.class = FileChannel
logging.channels.file.pattern = %Y-%m-%d %H:%M:%S.%i [%p] %s<%I>: %t
logging.channels.file.path = ${application.dir}${application.baseName}.log
logging.channels.file.rotation = 100K
logging.channels.file.archive = number
logging.channels.file.purgeCount = 3
